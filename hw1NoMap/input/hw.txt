Resubmission:  For programs with a score 80 or less, there will be one opportunity to fix aprogram and resubmit within 3 days.  minor fixes are 10%, no matter how small (all of themtogether 10% based on the opinion of the TA and the instructor).  major fixes are 30% off(something that requires hours of work, based on the instructor opinion).  Programs with ascore 85 or higher can be resubmitted, but the additional credit will be considered only atthe end of the course.

A program not submitted by the deadline is zero points Any exception or late submissionmust be discussed and approved by the instructor at least 2 days before the deadline.  Noticethis HW is impossible to do in a couple of days.  A non-working program, failing to produceoutput, is worth 10 points (i.e.  not producing output for the easiest test case).  A programthat does some computations correctly, but fails several test cases (especially the easy ones)is worth 50 points.  Only programs that work correctly with most input files that produce
correct results will get a PASS score of 60 or higher.  In general, correctness is more importantthan speed.•Resubmission:  For programs with a score 80 or less, there will be one opportunity to fix aprogram and resubmit within 3 days.  minor fixes are 10%, no matter how small (all of themtogether 10% based on the opinion of the TA and the instructor).  major fixes are 30% off(something that requires hours of work, based on the instructor opinion).  Programs with ascore 85 or higher can be resubmitted, but the additional credit will be considered only atthe end of the course.

Your program will be tested with 10 test cases, going from easy to difficult.  You can assume70% of test cases will be clean, valid input files.  The remaining 30% will test correctness andefficiency with harder input.  We will avoid abnormal, superhard test cases (e.g.  words with100 letters, file with 1M words, etc).  Nevertheless, try to handle such rare cases.  The TAwill makepreliminarytest cases available 1 week before the deadline so that you can self-testyour program; please report any issues with the test cases as soon as possible in case the TAhas made any mistake or some test case is too difficult


Your program will be tested for originality, comparing it to other students source code, sourcecode students from past semesters and top source code sites from the Internet (e.g.  github,stackoverflow).   You  must  disclose  any  source  code  that  was  not  written  by  you.   Keep  inmind several students may get source code from the same site, especially if it comes as a tophit in Google.•Your program should display a small “help” if not input parameters are provided and mustwrite  error  messages  to  the  screen.   Your  program  should  not  crash,  halt  unexpectedly  orproduce unhandled exceptions.  Consider empty input, blank lines and so on.•Unix system (UH Linux server).  You can develop and test your code on any computer oroperating system (e.g.  Windows, Mac), BUT your program will be tested only on our courseserver.  Therefore, test it carefully on the UH server before the deadline.•Source code:the quality of your source code will be graded including using theory learned in class, clarityof identifiers, indentation, comments, elegance of recursive solution.  Moreover, source codeoriginality  will  be  checked  with  plagiarism  tools.   Notice  that  source  code  written  by  oneperson, later modified by another person, is likely to be detected.


Rank ties should be considered (i.e.  keywords having the same frequency).  All of them shouldbe included and must be sorted alphabetically.  This will be a rare case, but you should stillconsider it.•Correctness is the most important requirement:  TEST your program with many expressions.Your program should not crash or produce exceptions with any input or wrong parameters.•Functional,  structured  programming  is  required.   The  list  needs  to  be  passed  as  functionargument and/or function return value, but cannot be a global variable.  The program mustbe prepared to handle zeroes or simple errors like spaces or missing numbers.•Create  a  README  file  explaining  how  to  run  your  program  and  explaining  any  issues  orincomplete features



Recursionis required.  You can develop forward or backward recursion starting from eitherside of the list.  You can get 10% extra credit for forward recursion for a maximum grade of100 (cannot be accumulated towards other HW or exam).•Functional expressions:  Your program should internally use lambda expressions when possi-ble.  Your program should use map()/reduce() functional constructs to compute frequencies,not simple linear recursion.•Lists  (dynamically  sized)  are  required  to  store  words:  input,  temporary  and  output.   Youcannot use existing libraries with arrays, dictionary or hash tables data structures.  Therefore,you  cannot  use  their  associated  functions  either.   Using  such  libraries  defeats  a  functionalprogramming approach.  Make sure lists are not mutated after function calls.•Recursive functions are required to process lists.  Specifically, it is unacceptable to use tradi-tional loops (while/for) to process the list(s).  While() or for() loops are acceptable, only toread the input file into a list or produce the final output file.  Nevertheless, recursive functionsto read and write files are encouraged.•There will be a list of stopwords (articles, adverbs, prepositions) that should be eliminated(provided by the instructor).  These words provide no value in web searches.  The remainingwords are important.  Those are the keywords, which are the main output.•Search and sort algorithms:  All lists should be processed with recursive sort and recursivesearch functions,  without mutation.  It is acceptable to have anO(n2) sort algorithm,  butO(nlog(n)) is encouraged; in your source code comments specify which sort/search algorithmyou are using.  Search can also be either sequential or binary, with binary being preferred.Keep  in  mind  a  recursive  sort  algorithm  will  use  significant  RAM.  Notice  you  cannot  usebuilt-in sort functions since they produce variable mutation.  Therefore, you have to developyour own sort and search functions.•In this HW edition numbers can be ignored.


 OutputThe output should be sent to the output fileexactlyin the format below with each word and itsfrequency, one per line.  Avoid changing the output format or adding any other messages since thiswill prevent automated testing.Output example withk= 2 and least frequent keywords:Gramercy 3Bellafontaine 25    Requirements•Programming language:  JavaScript, meeting the requirements below.•Functional programmingis the main requirement, as detailed below.  Basically, this meansall functions should be recursive, there should be no variable mutation and all computationswill happen via lists.


 IntroductionYou will write a program to find the most important words in a file:  keywords.  This is the mainmechanism to find documents on the web with a search engine like Google.  There will be an inputintegerkto find thekleast frequent words.The input files will be small,  relative to RAM. Since this homework requires functional pro-gramming,  you must use recursive functions and lambda expressions to solve the problem.  Youshould worry less about memory efficiency and time complexity, but try to reach good O().The programming language will be:  JavaScript (aka JS). The interpreter will be ’node’.2    InputThe input file name will be different in every call:  it will be the main input parameter.  Therefore,your program will have to parse the input file name.The input is one text file, with at most 1000 different words or numbers, separated by spaces,punctuation symbols and any other common symbols.  Repeated spaces, tabs and new lines shouldbe considered as one space.  Words will be either English words, either from a dictionary, acronyms(e.g.  DNA, IP, RAID) or names (city, person, company).  You can assume words will be at most20 characters long, combining lower and uppercase.3    Program and input specificationThe main program should be called ”keyword” (exactly like this, in lower case, please avoid othernames).Call syntax, assuming your main program is ’keyword.js’, is as follows:node keyword.js "input=xyz.txt;k=3;output=keywords.txt"A  word  is  regular  expression  of  letters,  starting  with  a  letter,  perhaps  combined  with  digits(dictionary words or variable names or product names), where letters can be lower or upper case.Names  and  common  words  are  all  letters.   Similary,  a  number  is  a  regular  expression  of  digits,perhaps having a decimal part.  Notice that words can be followed by punctuation signs anywhere.Words can be capitalized (e.g.  names).
